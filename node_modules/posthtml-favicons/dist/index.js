"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_1 = tslib_1.__importDefault(require("fs"));
var path_1 = tslib_1.__importDefault(require("path"));
var util_1 = tslib_1.__importDefault(require("util"));
var mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
var favicons_1 = tslib_1.__importDefault(require("favicons"));
var writeFile = util_1.default.promisify(fs_1.default.writeFile);
/**
 * @todo implement caching
 */
function plugin(options) {
    if (options === void 0) { options = {}; }
    var root = options.root || "./";
    var outDir = options.outDir || "./dist";
    // const shouldCache = options.cache === undefined ? true : options.cache;
    var configuration = options.configuration || {};
    return function postHtmlFavicons(tree) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var filePath;
            tree.match({ tag: "link", attrs: { rel: /icon/ } }, function (node) {
                if (node.attrs.href === undefined) {
                    return node;
                }
                filePath = path_1.default.resolve(root, node.attrs.href);
                // Remove original link tag
                return false;
            });
            if (filePath === undefined) {
                console.info("[posthtml-favicon] No favicon link tag was found.");
                return resolve();
            }
            if (!fs_1.default.existsSync(outDir)) {
                mkdirp_1.default.sync(outDir);
            }
            favicons_1.default(filePath, configuration, function (err, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var writeFilePromises, _i, _a, _b, name_1, contents, e_1;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!err) return [3 /*break*/, 1];
                            reject(err);
                            return [3 /*break*/, 6];
                        case 1:
                            writeFilePromises = [];
                            // Write images to disk
                            for (_i = 0, _a = tslib_1.__spreadArrays(res.images, res.files); _i < _a.length; _i++) {
                                _b = _a[_i], name_1 = _b.name, contents = _b.contents;
                                writeFilePromises.push(writeFile(path_1.default.resolve(outDir, name_1), contents));
                            }
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, Promise.all(writeFilePromises)];
                        case 3:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            e_1 = _c.sent();
                            return [2 /*return*/, reject(e_1)];
                        case 5:
                            // Add tags to head tag
                            tree.match({ tag: "head" }, function (head) {
                                return tslib_1.__assign(tslib_1.__assign({}, head), { content: tslib_1.__spreadArrays(head.content, res.html) });
                            });
                            resolve(tree);
                            _c.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            }); });
        });
    };
}
exports.default = plugin;
module.exports = plugin;
