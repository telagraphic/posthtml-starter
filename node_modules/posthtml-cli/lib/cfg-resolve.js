"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _path=_interopRequireDefault(require("path")),_cosmiconfig=require("cosmiconfig"),_toCamelCase=_interopRequireDefault(require("to-camel-case")),_mergeOptions=_interopRequireDefault(require("merge-options"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=({input,flags={}})=>{var _config2,_config3,_config4,_use;const explorer=(0,_cosmiconfig.cosmiconfigSync)("posthtml");let{config,use,options={},output,root="./",allInOutput=!1}=flags;if(config&&({config}=explorer.load(config)),use){var _config$plugins,_config;const configPluginOptions=null!==(_config$plugins=null===(_config=config)||void 0===_config?void 0:_config.plugins)&&void 0!==_config$plugins?_config$plugins:{};// Plugins defined via CLI options take precedence over the ones from config file.
// Add the remaining plugins if there is any.
if(use=[].concat(use).reduce((cfg,name)=>{let cliOptions=flags[(0,_toCamelCase.default)(name)],configOptions=configPluginOptions[name];// We merge this way because options can be both strings and objects.
const merged=(0,_mergeOptions.default)({[name]:configOptions},{[name]:cliOptions||{}});// Assigning as we loop `use` makes sure that the order in cfg.plugins is correct.
return cfg.plugins[name]=merged[name],configOptions&&delete configPluginOptions[name],cfg},{plugins:{}}),config&&config.plugins){for(let name in configPluginOptions)configPluginOptions[name]&&(use.plugins[name]=configPluginOptions[name]);// Now all the plugins are in `use.plugins`.
// Delete `config.plugins` for correct merging later: mergeOptions(config, {...}, use)
delete config.plugins}}if(config||use||({config}=explorer.search()),input=[].concat(input&&0<input.length?input:null===(_config2=config)||void 0===_config2?void 0:_config2.input).filter(Boolean).map(file=>{const ignoreFile=file.startsWith("!");let ignoreSymbol="";return ignoreFile&&(ignoreSymbol="!",file=file.slice(1)),_path.default.join(ignoreSymbol,_path.default.resolve(root),file)}),0===input.length)throw new TypeError("input files not found");return(0,_mergeOptions.default)(null!==(_config3=config)&&void 0!==_config3?_config3:{},{input,output:null!==output&&void 0!==output?output:null===(_config4=config)||void 0===_config4?void 0:_config4.output,options,root,allInOutput},null!==(_use=use)&&void 0!==_use?_use:{})};exports.default=_default;